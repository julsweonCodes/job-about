generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model test {
  id         BigInt    @id @default(autoincrement())
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  deleted_at DateTime? @db.Timestamptz(6)
  content    String?
}

model users {
  id                BigInt            @id @default(autoincrement())
  users_id          String            @db.VarChar(255)
  name              String            @db.VarChar(100)
  phone_number      String?           @db.VarChar(20)
  email             String            @db.VarChar(255)
  img_url           String?           @db.VarChar(2048)
  job_fit_type_id_1 BigInt?
  job_fit_type_id_2 BigInt?
  job_fit_type_id_3 BigInt?
  role              Role
  created_at        DateTime          @default(now()) @db.Timestamptz(6)
  deleted_at        DateTime?         @db.Timestamptz(6)
  updated_at        DateTime          @default(now()) @db.Timestamptz(6)
  bookmarked_jobs   bookmarked_jobs[]
  business_locs     business_loc[]
  job_posts         job_posts[]
  profiles          profiles[]
  jobFit1           job_fit_types?    @relation("UserFit1", fields: [job_fit_type_id_1], references: [id], onDelete: Restrict)
  jobFit2           job_fit_types?    @relation("UserFit2", fields: [job_fit_type_id_2], references: [id], onDelete: Restrict)
  jobFit3           job_fit_types?    @relation("UserFit3", fields: [job_fit_type_id_3], references: [id], onDelete: Restrict)
}

model business_loc {
  id              BigInt        @id @default(autoincrement())
  name            String        @db.VarChar(100)
  phone_number    String        @db.VarChar(20)
  address         String        @db.VarChar(255)
  operating_start String        @db.VarChar(20)
  operating_end   String        @db.VarChar(20)
  logo_url        String        @db.VarChar(2048)
  img_url1        String        @db.VarChar(2048)
  img_url2        String        @db.VarChar(2048)
  img_url3        String        @db.VarChar(2048)
  img_url4        String        @db.VarChar(2048)
  img_url5        String        @db.VarChar(2048)
  language_level  LanguageLevel
  description     String
  user_id         BigInt
  created_at      DateTime      @default(now()) @db.Timestamptz(6)
  deleted_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime      @default(now()) @db.Timestamptz(6)
  user            users         @relation(fields: [user_id], references: [id])
  job_posts       job_posts[]
}

model profiles {
  id               BigInt             @id @default(autoincrement())
  user_id          BigInt
  job_type1        JobType
  job_type2        JobType?
  job_type3        JobType?
  work_type        WorkType
  available_day    AvailableDay
  available_hour   AvailableHour
  location         Location
  language_level   LanguageLevel
  description      String             @unique
  created_at       DateTime           @default(now()) @db.Timestamptz(6)
  updated_at       DateTime           @default(now()) @db.Timestamptz(6)
  deleted_at       DateTime?          @db.Timestamptz(6)
  skill_id1        BigInt
  skill_id2        BigInt?
  skill_id3        BigInt?
  applications     applications[]
  skill1           skills             @relation("ProfileSkill1", fields: [skill_id1], references: [id])
  skill2           skills?            @relation("ProfileSkill2", fields: [skill_id2], references: [id], onDelete: Restrict)
  skill3           skills?            @relation("ProfileSkill3", fields: [skill_id3], references: [id], onDelete: Restrict)
  user             users              @relation(fields: [user_id], references: [id])
  work_experiences work_experiences[]
}

model work_experiences {
  id           BigInt    @id @default(autoincrement())
  profile_id   BigInt
  company_name String    @db.VarChar(100)
  job_type     JobType
  start_date   DateTime  @db.Timestamptz(6)
  end_date     DateTime  @db.Timestamptz(6)
  work_type    WorkType
  description  String?
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  deleted_at   DateTime? @db.Timestamptz(6)
  updated_at   DateTime  @default(now()) @db.Timestamptz(6)
  profile      profiles  @relation(fields: [profile_id], references: [id])
}

model skills {
  id         BigInt      @id @unique @default(autoincrement())
  name       String      @db.VarChar(50)
  created_at DateTime    @default(now()) @db.Timestamptz(6)
  deleted_at DateTime?   @db.Timestamptz(6)
  updated_at DateTime    @default(now()) @db.Timestamptz(6)
  job1       job_posts[] @relation("JobSkill1")
  job2       job_posts[] @relation("JobSkill2")
  job3       job_posts[] @relation("JobSkill3")
  profile1   profiles[]  @relation("ProfileSkill1")
  profile2   profiles[]  @relation("ProfileSkill2")
  profile3   profiles[]  @relation("ProfileSkill3")
}

model job_fit_types {
  id         BigInt      @id @default(autoincrement())
  name       String      @db.VarChar(50)
  created_at DateTime    @default(now()) @db.Timestamptz(6)
  deleted_at DateTime?   @db.Timestamptz(6)
  updated_at DateTime    @default(now()) @db.Timestamptz(6)
  jobFit1    job_posts[] @relation("JobFit1")
  jobFit2    job_posts[] @relation("JobFit2")
  jobFit3    job_posts[] @relation("JobFit3")
  userFit1   users[]     @relation("UserFit1")
  userFit2   users[]     @relation("UserFit2")
  userFit3   users[]     @relation("UserFit3")
}

model job_posts {
  id               BigInt            @id @default(autoincrement())
  business_loc_id  BigInt
  user_id          BigInt
  title            String            @db.VarChar(100)
  job_type         JobType
  deadline         DateTime          @db.Timestamptz(6)
  work_schedule    String            @db.VarChar(100)
  wage             Float
  location         Location
  description      String
  status           JobStatus
  created_at       DateTime          @default(now()) @db.Timestamptz(6)
  deleted_at       DateTime?         @db.Timestamptz(6)
  job_fit_type_id1 BigInt
  job_fit_type_id2 BigInt
  job_fit_type_id3 BigInt
  skill_id1        BigInt
  skill_id2        BigInt
  skill_id3        BigInt
  updated_at       DateTime          @default(now()) @db.Timestamptz(6)
  applications     applications[]
  bookmarked_jobs  bookmarked_jobs[]
  business_loc     business_loc      @relation(fields: [business_loc_id], references: [id])
  jobFit1          job_fit_types     @relation("JobFit1", fields: [job_fit_type_id1], references: [id])
  jobFit2          job_fit_types     @relation("JobFit2", fields: [job_fit_type_id2], references: [id])
  jobFit3          job_fit_types     @relation("JobFit3", fields: [job_fit_type_id3], references: [id])
  skill1           skills            @relation("JobSkill1", fields: [skill_id1], references: [id])
  skill2           skills            @relation("JobSkill2", fields: [skill_id2], references: [id])
  skill3           skills            @relation("JobSkill3", fields: [skill_id3], references: [id])
  user             users             @relation(fields: [user_id], references: [id])
}

model applications {
  id          BigInt            @id @default(autoincrement())
  job_post_id BigInt
  profile_id  BigInt
  status      ApplicationStatus
  reg_date    DateTime          @db.Timestamptz(6)
  chg_date    DateTime          @db.Timestamptz(6)
  created_at  DateTime          @default(now()) @db.Timestamptz(6)
  deleted_at  DateTime?         @db.Timestamptz(6)
  updated_at  DateTime          @default(now()) @db.Timestamptz(6)
  job_post    job_posts         @relation(fields: [job_post_id], references: [id])
  profile     profiles          @relation(fields: [profile_id], references: [id])
}

model bookmarked_jobs {
  id          BigInt    @id @default(autoincrement())
  user_id     BigInt
  job_post_id BigInt
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  deleted_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime  @default(now()) @db.Timestamptz(6)
  job_post    job_posts @relation(fields: [job_post_id], references: [id])
  user        users     @relation(fields: [user_id], references: [id])
}

enum Role {
  APPLICANT
  EMPLOYER
}

enum LanguageLevel {
  BEGINNER
  INTERMEDIATE
  FLUENT
}

enum WorkType {
  REMOTE
  ON_SITE
  HYBRID
}

enum AvailableDay {
  WEEKDAYS
  WEEKENDS
}

enum AvailableHour {
  AM
  PM
}

enum Location {
  TORONTO
  NORTH_YORK
  SCARBOROUGH
  ETOBICOKE
  MISSISSAUGA
  BRAMPTON
  VAUGHAN
  RICHMOND_HILL
  MARKHAM
  THORNHILL
  PICKERING
  AJAX
  WHITBY
  OSHAWA
  OAKVILLE
  BURLINGTON
  MILTON
  NEWHAMBURG
}

enum JobType {
  SERVER
  KITCHEN
  DELIVERY
  CASHIER
  CLEANING
  CUSTOMER_SERVICE
  SALES
  DRIVER
  RECEPTIONIST
  SECURITY
  MANAGER
  BARISTA
  CHEF
  STOCKER
  TECH_SUPPORT
  WAREHOUSE
  ACCOUNTANT
  MARKETING
  HR
  DESIGNER
  DEVELOPER
  ENGINEER
  TEACHER
  TRANSLATOR
  PHARMACIST
  NURSE
  DOCTOR
  FARMER
  ELECTRICIAN
  PLUMBER
  JANITOR
}

enum JobStatus {
  DRAFT
  PUBLISHED
  CLOSED
}

enum ApplicationStatus {
  APPLIED
  IN_REVIEW
  REJECTED
  WITHDRAWN
  HIRED
}
